<?php
/**
 * Empty div's to be used for the ApplePay pop-up.
 */
?>
<div id="set-up-apple-pay-button" class="apple-pay apple-pay-set-up-button apple-pay-set-up-button-black input-block-level d-none"></div>
<div id="apple-pay-wrapper" style="display: none;" lang="en" class="apple-pay apple-pay-button apple-pay-button-black d-none hidden"></div>

<script>
    /**
     * This wrapper overrides the save()-function of Magento Onepage Checkout's Review-class.
     *
     * This triggers the Apple Pay pop-up to be shown after the Place Order-button is
     * clicked, so the payment can be processed before any other actions are
     * triggered.
     */
    Review.prototype.save = Review.prototype.save.wrap(function(save) {
        /**
         * If Apple Pay is not the selected Payment Method, fallback to normal execution.
         */
        if(payment.currentMethod !== 'buckaroo3extended_applepay') {
            save()

            return
        }

        var quote = new Ajax.Request(
            '/buckaroo3extended/checkout/applepay',
            {
                method: 'post',
                onSuccess: function(response) {
                    var results = processResponse(response.responseJSON)
                    var options = new BuckarooSdk.ApplePay.ApplePayOptions(
                        results.storeName, results.countryCode, results.currencyCode, results.cultureCode,
                        results.merchantIdentifier, results.lineItems, results.totalLineItems, results.shippingType,
                        results.shippingMethods, BuckarooSdk.ApplePay.captureFunds
                    )
                    var payment = new BuckarooSdk.ApplePay.ApplePayPayment('#apple-pay-wrapper', options)
                },
                onFailure: checkout.ajaxFailure.bind(checkout)
            }
        )
    })

    BuckarooSdk.ApplePay.captureFunds = function(payment) {
        debugger
        var authorizationResult = {
            status: ApplePaySession.STATUS_SUCCESS,
            errors: []
        }
        $('#debug-wrapper').removeClass('d-none')
        $('#debug').html(JSON.stringify(payment))
        if(authorizationResult.status === ApplePaySession.STATUS_SUCCESS) {
        } else {
            var errors = authorizationResult.errors.map(function(error) {
                return error.message
            })
            this.showError('Your payment could not be processed. ' + errors.join(' '))
            authorizationResult.errors.forEach(function(error) {
                console.error(error.message + ' (' + error.contactField + ': ' + error.code + ').')
            })
        }
        return Promise.resolve(authorizationResult)
    }

    function processResponse(response) {
        return {
            storeName: 'Test Store',
            countryCode: response.country_id,
            currencyCode: 'EUR',
            cultureCode: 'en',
            merchantIdentifier: 'E5CF7C41EAD6406FACA23FAB9A7A8625',
            lineItems: processLineItems(response),
            totalLineItems: processTotalLineItems(response),
            shippingType: 'shipping',
            shippingMethods: createShippingMethodInformation(response)
        }
    }

    function processLineItems(response) {
        return [
            {label: 'Subtotal', amount: response.subtotal, type: 'final'},
            {label: 'Delivery', amount: response.shipping_incl_tax, type: 'final'}
        ]
    }

    function processTotalLineItems(response) {
        return [
            {label: 'Test Store', amount: response.shipping_incl_tax, type: 'final'}
        ]
    }

    function createShippingMethodInformation(response) {
        return [
            {
                label: response.shipping_description,
                amount: response.shipping_incl_tax,
                identifier: response.shipping_method,
                detail: null
            }
        ]
    }
</script>